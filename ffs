/root/go/pkg/mod/go.etcd.io/etcd@v0.0.0-20191023171146-3cf2f69b5738/Documentation/dev-internal/release.md:The public key for GPG signing can be found at [CoreOS Application Signing Key](https://coreos.com/security/app-signing-key)
/root/go/pkg/mod/google.golang.org/api@v0.13.0/digitalassetlinks/v1/digitalassetlinks-api.json:          "description": "Because there is no global enforcement of package name uniqueness, we also\nrequire a signing certificate, which in combination with the package name\nuniquely identifies an app.\n\nSome apps' signing keys are rotated, so they may be signed by different\nkeys over time.  We treat these as distinct assets, since we use (package\nname, cert) as the unique ID.  This should not normally pose any problems\nas both versions of the app will make the same or similar statements.\nOther assets making statements about the app will have to be updated when a\nkey is rotated, however.\n\n(Note that the syntaxes for publishing and querying for statements contain\nsyntactic sugar to easily let you specify apps that are known by multiple\ncertificates.)\nREQUIRED"
/root/go/pkg/mod/google.golang.org/api@v0.13.0/digitalassetlinks/v1/digitalassetlinks-gen.go:	// require a signing certificate, which in combination with the package
/root/go/pkg/mod/google.golang.org/grpc@v1.36.0/credentials/tls/certprovider/meshca/plugin_test.go:	certPEM []byte             // PEM encoding of signing certificate.
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/privval/file_test.go:		assert.Error(err, "expected error on signing conflicting vote")
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/privval/file_test.go:		assert.Error(err, "expected error on signing conflicting proposal")
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/test/maverick/consensus/state.go:	// and helps us avoid signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/SECURITY.md:* A correct node signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/consensus/state.go:	// and helps us avoid signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/CHANGELOG.md:- [docs] [\#3061](https://github.com/tendermint/tendermint/issues/3061) Added specification for signing consensus msgs at
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("failed to pull the signing certificate to determine your team ID: %v", err)
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("failed to parse your signing certificate to determine your team ID: %v", err)
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("the signing certificate has no organizational unit (team ID).")
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h:typedef struct ESS_signing_cert ESS_SIGNING_CERT;
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h:typedef struct ESS_signing_cert_v2_st ESS_SIGNING_CERT_V2;
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h: * the ESS signing certificate attribute beside the PKCS7 signed data.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.32/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.32/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.12.0/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.33/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.33/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.25/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.25/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/curl-sys-0.4.23/curl/tests/python_dependencies/impacket/nt_errors.py:        0xC0000603: ("STATUS_IMAGE_CERT_REVOKED","Windows cannot verify the digital signature for this file. The signing certificate for this file has been revoked."),
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.0.25/src/zlib/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.1/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.4/src/secure/key.rs:        output.signing.copy_from_slice(&key[..SIGNED_KEY_LEN]);
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.4/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs:    /// Constructs a new HMAC signing context using the given digest algorithm
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.1.2/src/zlib/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.1.2/src/zlib-ng/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/go/pkg/mod/go.etcd.io/etcd@v0.0.0-20191023171146-3cf2f69b5738/Documentation/dev-internal/release.md:The public key for GPG signing can be found at [CoreOS Application Signing Key](https://coreos.com/security/app-signing-key)
/root/go/pkg/mod/google.golang.org/api@v0.13.0/digitalassetlinks/v1/digitalassetlinks-api.json:          "description": "Because there is no global enforcement of package name uniqueness, we also\nrequire a signing certificate, which in combination with the package name\nuniquely identifies an app.\n\nSome apps' signing keys are rotated, so they may be signed by different\nkeys over time.  We treat these as distinct assets, since we use (package\nname, cert) as the unique ID.  This should not normally pose any problems\nas both versions of the app will make the same or similar statements.\nOther assets making statements about the app will have to be updated when a\nkey is rotated, however.\n\n(Note that the syntaxes for publishing and querying for statements contain\nsyntactic sugar to easily let you specify apps that are known by multiple\ncertificates.)\nREQUIRED"
/root/go/pkg/mod/google.golang.org/api@v0.13.0/digitalassetlinks/v1/digitalassetlinks-gen.go:	// require a signing certificate, which in combination with the package
/root/go/pkg/mod/google.golang.org/grpc@v1.36.0/credentials/tls/certprovider/meshca/plugin_test.go:	certPEM []byte             // PEM encoding of signing certificate.
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/privval/file_test.go:		assert.Error(err, "expected error on signing conflicting vote")
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/privval/file_test.go:		assert.Error(err, "expected error on signing conflicting proposal")
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/test/maverick/consensus/state.go:	// and helps us avoid signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/SECURITY.md:* A correct node signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/consensus/state.go:	// and helps us avoid signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/CHANGELOG.md:- [docs] [\#3061](https://github.com/tendermint/tendermint/issues/3061) Added specification for signing consensus msgs at
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("failed to pull the signing certificate to determine your team ID: %v", err)
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("failed to parse your signing certificate to determine your team ID: %v", err)
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("the signing certificate has no organizational unit (team ID).")
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h:typedef struct ESS_signing_cert ESS_SIGNING_CERT;
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h:typedef struct ESS_signing_cert_v2_st ESS_SIGNING_CERT_V2;
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h: * the ESS signing certificate attribute beside the PKCS7 signed data.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.32/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.32/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.12.0/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.33/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.33/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.25/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.25/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/curl-sys-0.4.23/curl/tests/python_dependencies/impacket/nt_errors.py:        0xC0000603: ("STATUS_IMAGE_CERT_REVOKED","Windows cannot verify the digital signature for this file. The signing certificate for this file has been revoked."),
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.0.25/src/zlib/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.1/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.4/src/secure/key.rs:        output.signing.copy_from_slice(&key[..SIGNED_KEY_LEN]);
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.4/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs:    /// Constructs a new HMAC signing context using the given digest algorithm
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.1.2/src/zlib/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.1.2/src/zlib-ng/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/go/pkg/mod/go.etcd.io/etcd@v0.0.0-20191023171146-3cf2f69b5738/Documentation/dev-internal/release.md:The public key for GPG signing can be found at [CoreOS Application Signing Key](https://coreos.com/security/app-signing-key)
/root/go/pkg/mod/google.golang.org/api@v0.13.0/digitalassetlinks/v1/digitalassetlinks-api.json:          "description": "Because there is no global enforcement of package name uniqueness, we also\nrequire a signing certificate, which in combination with the package name\nuniquely identifies an app.\n\nSome apps' signing keys are rotated, so they may be signed by different\nkeys over time.  We treat these as distinct assets, since we use (package\nname, cert) as the unique ID.  This should not normally pose any problems\nas both versions of the app will make the same or similar statements.\nOther assets making statements about the app will have to be updated when a\nkey is rotated, however.\n\n(Note that the syntaxes for publishing and querying for statements contain\nsyntactic sugar to easily let you specify apps that are known by multiple\ncertificates.)\nREQUIRED"
/root/go/pkg/mod/google.golang.org/api@v0.13.0/digitalassetlinks/v1/digitalassetlinks-gen.go:	// require a signing certificate, which in combination with the package
/root/go/pkg/mod/google.golang.org/grpc@v1.36.0/credentials/tls/certprovider/meshca/plugin_test.go:	certPEM []byte             // PEM encoding of signing certificate.
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/privval/file_test.go:		assert.Error(err, "expected error on signing conflicting vote")
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/privval/file_test.go:		assert.Error(err, "expected error on signing conflicting proposal")
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/test/maverick/consensus/state.go:	// and helps us avoid signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/SECURITY.md:* A correct node signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/consensus/state.go:	// and helps us avoid signing conflicting votes
/root/go/pkg/mod/github.com/tendermint/tendermint@v0.34.8/CHANGELOG.md:- [docs] [\#3061](https://github.com/tendermint/tendermint/issues/3061) Added specification for signing consensus msgs at
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("failed to pull the signing certificate to determine your team ID: %v", err)
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("failed to parse your signing certificate to determine your team ID: %v", err)
/root/go/pkg/mod/golang.org/x/mobile@v0.0.0-20190719004257-d2bd2a29d028/cmd/gomobile/build_iosapp.go:		err = fmt.Errorf("the signing certificate has no organizational unit (team ID).")
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h:typedef struct ESS_signing_cert ESS_SIGNING_CERT;
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h:typedef struct ESS_signing_cert_v2_st ESS_SIGNING_CERT_V2;
/root/.cache/node-gyp/12.21.0/include/node/openssl/ts.h: * the ESS signing certificate attribute beside the PKCS7 signed data.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.32/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.32/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.12.0/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.33/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.33/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.25/src/cms.rs:    /// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.10.25/src/ocsp.rs:    /// OCSP response signing certificate. Some responders do not include this in the response.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/curl-sys-0.4.23/curl/tests/python_dependencies/impacket/nt_errors.py:        0xC0000603: ("STATUS_IMAGE_CERT_REVOKED","Windows cannot verify the digital signature for this file. The signing certificate for this file has been revoked."),
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.0.25/src/zlib/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.1/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.4/src/secure/key.rs:        output.signing.copy_from_slice(&key[..SIGNED_KEY_LEN]);
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/cookie-0.11.4/src/secure/key.rs:    /// Returns the raw bytes of a key suitable for signing cookies.
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.13.5/src/hmac.rs:    /// Constructs a new HMAC signing context using the given digest algorithm
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.1.2/src/zlib/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.1.2/src/zlib-ng/win32/DLL_FAQ.txt:  - In principle, you can do it by assigning calling convention
/root/go/src/github.com/klyed/hiverpc-go/transactions/sign_the_shit.go:	"github.com/klyed/hiverpc-go/transactions/rfc6979"
/root/go/src/github.com/klyed/hiverpc-go/helper.go:	"github.com/klyed/hiverpc-go/transactions"
/root/go/src/github.com/klyed/hiverpc-go/trx.go:	"github.com/klyed/hiverpc-go/transactions"
